// Code generated by MockGen. DO NOT EDIT.
// Source: act.go

// Package bird is a generated GoMock package.
package bird

import (
	http "net/http"
	reflect "reflect"

	logf "github.com/dev-mockingbird/logf"
	validate "github.com/dev-mockingbird/validate"
	gomock "github.com/golang/mock/gomock"
)

// MockActor is a mock of Actor interface.
type MockActor struct {
	ctrl     *gomock.Controller
	recorder *MockActorMockRecorder
}

// MockActorMockRecorder is the mock recorder for MockActor.
type MockActorMockRecorder struct {
	mock *MockActor
}

// NewMockActor creates a new mock instance.
func NewMockActor(ctrl *gomock.Controller) *MockActor {
	mock := &MockActor{ctrl: ctrl}
	mock.recorder = &MockActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActor) EXPECT() *MockActorMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockActor) Bind(data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockActorMockRecorder) Bind(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockActor)(nil).Bind), data)
}

// Get mocks base method.
func (m *MockActor) Get(key string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockActorMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockActor)(nil).Get), key)
}

// GetRequest mocks base method.
func (m *MockActor) GetRequest() *http.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest")
	ret0, _ := ret[0].(*http.Request)
	return ret0
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockActorMockRecorder) GetRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest", reflect.TypeOf((*MockActor)(nil).GetRequest))
}

// GetResponseWriter mocks base method.
func (m *MockActor) GetResponseWriter() http.ResponseWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponseWriter")
	ret0, _ := ret[0].(http.ResponseWriter)
	return ret0
}

// GetResponseWriter indicates an expected call of GetResponseWriter.
func (mr *MockActorMockRecorder) GetResponseWriter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponseWriter", reflect.TypeOf((*MockActor)(nil).GetResponseWriter))
}

// Logger mocks base method.
func (m *MockActor) Logger() logf.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(logf.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockActorMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockActor)(nil).Logger))
}

// Param mocks base method.
func (m *MockActor) Param(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Param", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Param indicates an expected call of Param.
func (mr *MockActorMockRecorder) Param(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Param", reflect.TypeOf((*MockActor)(nil).Param), key)
}

// Query mocks base method.
func (m *MockActor) Query(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockActorMockRecorder) Query(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockActor)(nil).Query), key)
}

// QueryArray mocks base method.
func (m *MockActor) QueryArray(key string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryArray", key)
	ret0, _ := ret[0].([]string)
	return ret0
}

// QueryArray indicates an expected call of QueryArray.
func (mr *MockActorMockRecorder) QueryArray(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryArray", reflect.TypeOf((*MockActor)(nil).QueryArray), key)
}

// RequestId mocks base method.
func (m *MockActor) RequestId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestId")
	ret0, _ := ret[0].(string)
	return ret0
}

// RequestId indicates an expected call of RequestId.
func (mr *MockActorMockRecorder) RequestId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestId", reflect.TypeOf((*MockActor)(nil).RequestId))
}

// Set mocks base method.
func (m *MockActor) Set(key string, data any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, data)
}

// Set indicates an expected call of Set.
func (mr *MockActorMockRecorder) Set(key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockActor)(nil).Set), key, data)
}

// Validate mocks base method.
func (m *MockActor) Validate(data any, rules ...validate.Rules) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{data}
	for _, a := range rules {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Validate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockActorMockRecorder) Validate(data interface{}, rules ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{data}, rules...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockActor)(nil).Validate), varargs...)
}

// Write mocks base method.
func (m *MockActor) Write(statusCode int, data any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Write", statusCode, data)
}

// Write indicates an expected call of Write.
func (mr *MockActorMockRecorder) Write(statusCode, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockActor)(nil).Write), statusCode, data)
}

// MockEntry is a mock of Entry interface.
type MockEntry struct {
	ctrl     *gomock.Controller
	recorder *MockEntryMockRecorder
}

// MockEntryMockRecorder is the mock recorder for MockEntry.
type MockEntryMockRecorder struct {
	mock *MockEntry
}

// NewMockEntry creates a new mock instance.
func NewMockEntry(ctrl *gomock.Controller) *MockEntry {
	mock := &MockEntry{ctrl: ctrl}
	mock.recorder = &MockEntryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntry) EXPECT() *MockEntryMockRecorder {
	return m.recorder
}

// Prepare mocks base method.
func (m *MockEntry) Prepare(methods ...string) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range methods {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Prepare", varargs...)
}

// Prepare indicates an expected call of Prepare.
func (mr *MockEntryMockRecorder) Prepare(methods ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockEntry)(nil).Prepare), methods...)
}

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// ON mocks base method.
func (m *MockRouter) ON(path string, act ...HandleFunc) Entry {
	m.ctrl.T.Helper()
	varargs := []interface{}{path}
	for _, a := range act {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ON", varargs...)
	ret0, _ := ret[0].(Entry)
	return ret0
}

// ON indicates an expected call of ON.
func (mr *MockRouterMockRecorder) ON(path interface{}, act ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{path}, act...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ON", reflect.TypeOf((*MockRouter)(nil).ON), varargs...)
}

// Use mocks base method.
func (m *MockRouter) Use(arg0 ...HandleFunc) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Use", varargs...)
}

// Use indicates an expected call of Use.
func (mr *MockRouterMockRecorder) Use(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockRouter)(nil).Use), arg0...)
}
